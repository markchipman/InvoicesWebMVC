@model WebInvoicesMVC.Models.InvoiceCreateViewModel


@using (Html.BeginForm())
{
  @Html.AntiForgeryToken()

  <div class="form-horizontal">
    <h4>InvoiceCreateViewModel</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
      @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
      </div>
    </div>

    <div class="form-group">
      @Html.LabelFor(model => model.Currency, htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.EnumDropDownListFor(model => model.Currency, htmlAttributes: new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.Currency, "", new { @class = "text-danger" })
      </div>
    </div>

    <div class="form-group">
      @Html.LabelFor(model => model.ClientId, htmlAttributes: new {@class = "control-label col-md-2"})
      <div class="col-md-10">
        @Html.EditorFor(model => model.ClientId, new {htmlAttributes = new {@class = "form-control"}})
        @Html.ValidationMessageFor(model => model.ClientId, "", new {@class = "text-danger"})
      </div>
    </div>

    <hr/>

    <div class="form-group">
      @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
      </div>
    </div>

    <div class="form-group">
      @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
      <div class="col-md-10">
        @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
      </div>
    </div>

    <div class="form-group">
      @Html.LabelFor(model => model.Quantity, htmlAttributes: new {@class = "control-label col-md-2"})
      <div class="col-md-10">
        @Html.EditorFor(model => model.Quantity, new {htmlAttributes = new {@class = "form-control"}})
        @Html.ValidationMessageFor(model => model.Quantity, "", new {@class = "text-danger"})
      </div>
    </div>

    <div class="form-group">
      <div class="col-md-offset-2 col-md-10">
        <input type="submit" name="submitButton" value="AddProduct" class="btn btn-default"/>
      </div>
    </div>

    <hr/>

    <div class="form-group">
      <div class="col-md-offset-2 col-md-10">
        <input type="submit" name="submitButton" value="Create" class="btn btn-default" />
      </div>
    </div>
  </div>
}

<div id="Products">
  @if (Model != null)
      {
        if (Model.Products != null)
        {
          foreach (var product in Model.Products)
          {
        <div class="form-group">
          @Html.LabelFor(model => product.ProductName, htmlAttributes: new { @class = "control-label col-md-2" })
          <div class="col-md-10">
            @Html.EditorFor(model => product.ProductName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => product.ProductName, "", new { @class = "text-danger" })
          </div>
        </div>

        <div class="form-group">
          @Html.LabelFor(model => product.Price, htmlAttributes: new { @class = "control-label col-md-2" })
          <div class="col-md-10">
            @Html.EditorFor(model => product.Price, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => product.Price, "", new { @class = "text-danger" })
          </div>
        </div>
      }
    }
  }
</div>

<div>
  @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
  @Scripts.Render("~/bundles/jqueryval")
}
